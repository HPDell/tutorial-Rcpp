// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "fibonacci.h"
#include <Rcpp.h>

using namespace std;
using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fibonacci_item
RcppExport SEXP _DemoRcpp_fibonacci_item(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_item(n));
    return rcpp_result_gen;
END_RCPP
}

// fibonacci_seq
RcppExport SEXP _DemoRcpp_fibonacci_seq(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_seq(n));
    return rcpp_result_gen;
END_RCPP
}

// fibonacci_sum
RcppExport SEXP _DemoRcpp_fibonacci_sum(SEXP nSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    Rcpp::traits::input_parameter<std::vector<double> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_sum(n, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DemoRcpp_fibonacci_item", (DL_FUNC) &_DemoRcpp_fibonacci_item, 1},
    {"_DemoRcpp_fibonacci_seq", (DL_FUNC) &_DemoRcpp_fibonacci_seq, 1},
    {"_DemoRcpp_fibonacci_sum", (DL_FUNC) &_DemoRcpp_fibonacci_sum, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DemoRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
